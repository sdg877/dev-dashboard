{"ast":null,"code":"import { Kind } from 'graphql';\nimport { CONTENT_TYPE_GQL, CONTENT_TYPE_JSON } from '../../lib/http.js';\nimport { isPlainObject } from '../../lib/prelude.js';\n/**\n * Clean a GraphQL document to send it via a GET query\n */\nexport const cleanQuery = str => str.replace(/([\\s,]|#[^\\n\\r]+)+/g, ` `).trim();\nexport const isGraphQLContentType = contentType => {\n  const contentTypeLower = contentType.toLowerCase();\n  return contentTypeLower.includes(CONTENT_TYPE_GQL) || contentTypeLower.includes(CONTENT_TYPE_JSON);\n};\nexport const parseGraphQLExecutionResult = result => {\n  try {\n    if (Array.isArray(result)) {\n      return {\n        _tag: `Batch`,\n        executionResults: result.map(parseExecutionResult)\n      };\n    } else if (isPlainObject(result)) {\n      return {\n        _tag: `Single`,\n        executionResult: parseExecutionResult(result)\n      };\n    } else {\n      throw new Error(`Invalid execution result: result is not object or array. \\nGot:\\n${String(result)}`);\n    }\n  } catch (e) {\n    return e;\n  }\n};\n/**\n * Example result:\n *\n * ```\n * {\n *  \"data\": null,\n *  \"errors\": [{\n *    \"message\": \"custom error\",\n *    \"locations\": [{ \"line\": 2, \"column\": 3 }],\n *    \"path\": [\"playerNew\"]\n *  }]\n * }\n * ```\n */\nexport const parseExecutionResult = result => {\n  if (typeof result !== `object` || result === null) {\n    throw new Error(`Invalid execution result: result is not object`);\n  }\n  let errors = undefined;\n  let data = undefined;\n  let extensions = undefined;\n  if (`errors` in result) {\n    if (!isPlainObject(result.errors) && !Array.isArray(result.errors)) {\n      throw new Error(`Invalid execution result: errors is not plain object OR array`); // prettier-ignore\n    }\n    errors = result.errors;\n  }\n  // todo add test coverage for case of null. @see https://github.com/jasonkuhrt/graphql-request/issues/739\n  if (`data` in result) {\n    if (!isPlainObject(result.data) && result.data !== null) {\n      throw new Error(`Invalid execution result: data is not plain object`); // prettier-ignore\n    }\n    data = result.data;\n  }\n  if (`extensions` in result) {\n    if (!isPlainObject(result.extensions)) throw new Error(`Invalid execution result: extensions is not plain object`); // prettier-ignore\n    extensions = result.extensions;\n  }\n  return {\n    data,\n    errors,\n    extensions\n  };\n};\nexport const isRequestResultHaveErrors = result => result._tag === `Batch` ? result.executionResults.some(isExecutionResultHaveErrors) : isExecutionResultHaveErrors(result.executionResult);\nexport const isExecutionResultHaveErrors = result => Array.isArray(result.errors) ? result.errors.length > 0 : Boolean(result.errors);\nexport const isOperationDefinitionNode = definition => {\n  return typeof definition === `object` && definition !== null && `kind` in definition && definition.kind === Kind.OPERATION_DEFINITION;\n};","map":{"version":3,"names":["Kind","CONTENT_TYPE_GQL","CONTENT_TYPE_JSON","isPlainObject","cleanQuery","str","replace","trim","isGraphQLContentType","contentType","contentTypeLower","toLowerCase","includes","parseGraphQLExecutionResult","result","Array","isArray","_tag","executionResults","map","parseExecutionResult","executionResult","Error","String","e","errors","undefined","data","extensions","isRequestResultHaveErrors","some","isExecutionResultHaveErrors","length","Boolean","isOperationDefinitionNode","definition","kind","OPERATION_DEFINITION"],"sources":["/Users/sylviadrake-gill/code/dev-dashboard/client/node_modules/graphql-request/src/legacy/lib/graphql.ts"],"sourcesContent":["import { Kind } from 'graphql'\nimport { CONTENT_TYPE_GQL, CONTENT_TYPE_JSON } from '../../lib/http.js'\nimport { isPlainObject } from '../../lib/prelude.js'\n/**\n * Refactored imports from `graphql` to be more specific, this helps import only the required files (100KiB)\n * instead of the entire package (greater than 500KiB) where tree-shaking is not supported.\n * @see https://github.com/jasonkuhrt/graphql-request/pull/543\n */\nimport type { OperationDefinitionNode } from 'graphql'\n\n/**\n * Clean a GraphQL document to send it via a GET query\n */\nexport const cleanQuery = (str: string): string => str.replace(/([\\s,]|#[^\\n\\r]+)+/g, ` `).trim()\n\nexport const isGraphQLContentType = (contentType: string) => {\n  const contentTypeLower = contentType.toLowerCase()\n\n  return contentTypeLower.includes(CONTENT_TYPE_GQL) || contentTypeLower.includes(CONTENT_TYPE_JSON)\n}\n\nexport type GraphQLRequestResult = GraphQLRequestResultBatch | GraphQLRequestResultSingle\nexport type GraphQLRequestResultBatch = { _tag: 'Batch'; executionResults: GraphQLExecutionResultBatch }\nexport type GraphQLRequestResultSingle = { _tag: 'Single'; executionResult: GraphQLExecutionResultSingle }\n\nexport type GraphQLExecutionResult = GraphQLExecutionResultSingle | GraphQLExecutionResultBatch\nexport type GraphQLExecutionResultBatch = GraphQLExecutionResultSingle[]\nexport type GraphQLExecutionResultSingle = {\n  data: object | null | undefined\n  errors: undefined | object | object[]\n  extensions?: object\n}\n\nexport const parseGraphQLExecutionResult = (result: unknown): Error | GraphQLRequestResult => {\n  try {\n    if (Array.isArray(result)) {\n      return {\n        _tag: `Batch`,\n        executionResults: result.map(parseExecutionResult),\n      }\n    } else if (isPlainObject(result)) {\n      return {\n        _tag: `Single`,\n        executionResult: parseExecutionResult(result),\n      }\n    } else {\n      throw new Error(`Invalid execution result: result is not object or array. \\nGot:\\n${String(result)}`)\n    }\n  } catch (e) {\n    return e as Error\n  }\n}\n\n/**\n * Example result:\n *\n * ```\n * {\n *  \"data\": null,\n *  \"errors\": [{\n *    \"message\": \"custom error\",\n *    \"locations\": [{ \"line\": 2, \"column\": 3 }],\n *    \"path\": [\"playerNew\"]\n *  }]\n * }\n * ```\n */\nexport const parseExecutionResult = (result: unknown): GraphQLExecutionResultSingle => {\n  if (typeof result !== `object` || result === null) {\n    throw new Error(`Invalid execution result: result is not object`)\n  }\n\n  let errors = undefined\n  let data = undefined\n  let extensions = undefined\n\n  if (`errors` in result) {\n    if (!isPlainObject(result.errors) && !Array.isArray(result.errors)) {\n      throw new Error(`Invalid execution result: errors is not plain object OR array`) // prettier-ignore\n    }\n    errors = result.errors\n  }\n\n  // todo add test coverage for case of null. @see https://github.com/jasonkuhrt/graphql-request/issues/739\n  if (`data` in result) {\n    if (!isPlainObject(result.data) && result.data !== null) {\n      throw new Error(`Invalid execution result: data is not plain object`) // prettier-ignore\n    }\n    data = result.data\n  }\n\n  if (`extensions` in result) {\n    if (!isPlainObject(result.extensions)) throw new Error(`Invalid execution result: extensions is not plain object`) // prettier-ignore\n    extensions = result.extensions\n  }\n\n  return {\n    data,\n    errors,\n    extensions,\n  }\n}\n\nexport const isRequestResultHaveErrors = (result: GraphQLRequestResult) =>\n  result._tag === `Batch`\n    ? result.executionResults.some(isExecutionResultHaveErrors)\n    : isExecutionResultHaveErrors(result.executionResult)\n\nexport const isExecutionResultHaveErrors = (result: GraphQLExecutionResultSingle) =>\n  Array.isArray(result.errors) ? result.errors.length > 0 : Boolean(result.errors)\n\nexport const isOperationDefinitionNode = (definition: unknown): definition is OperationDefinitionNode => {\n  return (\n    typeof definition === `object`\n    && definition !== null\n    && `kind` in definition\n    && definition.kind === Kind.OPERATION_DEFINITION\n  )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}