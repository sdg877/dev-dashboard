{"ast":null,"code":"import { tryCatch } from '../../lib/prelude.js';\nimport { isOperationDefinitionNode } from '../lib/graphql.js';\nimport { parse } from 'graphql';\nimport { print } from 'graphql';\n/**\n * helpers\n */\nconst extractOperationName = document => {\n  let operationName = undefined;\n  const defs = document.definitions.filter(isOperationDefinitionNode);\n  if (defs.length === 1) {\n    operationName = defs[0].name?.value;\n  }\n  return operationName;\n};\nconst extractIsMutation = document => {\n  let isMutation = false;\n  const defs = document.definitions.filter(isOperationDefinitionNode);\n  if (defs.length === 1) {\n    /* eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison --\n     * graphql@15's `OperationTypeNode` is a type, but graphql@16's `OperationTypeNode` is a native TypeScript enum\n     * Therefore, we cannot use `OperationTypeNode.MUTATION` here because it wouldn't work with graphql@15\n     **/\n    isMutation = defs[0].operation === `mutation`;\n  }\n  return isMutation;\n};\nexport const analyzeDocument = (document, excludeOperationName) => {\n  const expression = typeof document === `string` ? document : print(document);\n  let isMutation = false;\n  let operationName = undefined;\n  if (excludeOperationName) {\n    return {\n      expression,\n      isMutation,\n      operationName\n    };\n  }\n  const docNode = tryCatch(() => typeof document === `string` ? parse(document) : document);\n  if (docNode instanceof Error) {\n    return {\n      expression,\n      isMutation,\n      operationName\n    };\n  }\n  operationName = extractOperationName(docNode);\n  isMutation = extractIsMutation(docNode);\n  return {\n    expression,\n    operationName,\n    isMutation\n  };\n};","map":{"version":3,"names":["tryCatch","isOperationDefinitionNode","parse","print","extractOperationName","document","operationName","undefined","defs","definitions","filter","length","name","value","extractIsMutation","isMutation","operation","analyzeDocument","excludeOperationName","expression","docNode","Error"],"sources":["/Users/sylviadrake-gill/code/dev-dashboard/client/node_modules/graphql-request/src/legacy/helpers/analyzeDocument.ts"],"sourcesContent":["import { tryCatch } from '../../lib/prelude.js'\nimport { isOperationDefinitionNode } from '../lib/graphql.js'\nimport type { RequestDocument } from './types.js'\n/**\n * Refactored imports from `graphql` to be more specific, this helps import only the required files (100KiB)\n * instead of the entire package (greater than 500KiB) where tree-shaking is not supported.\n * @see https://github.com/jasonkuhrt/graphql-request/pull/543\n */\nimport type { DocumentNode } from 'graphql'\nimport { parse } from 'graphql'\nimport { print } from 'graphql'\n\n/**\n * helpers\n */\n\nconst extractOperationName = (document: DocumentNode): string | undefined => {\n  let operationName = undefined\n\n  const defs = document.definitions.filter(isOperationDefinitionNode)\n\n  if (defs.length === 1) {\n    operationName = defs[0]!.name?.value\n  }\n\n  return operationName\n}\n\nconst extractIsMutation = (document: DocumentNode): boolean => {\n  let isMutation = false\n\n  const defs = document.definitions.filter(isOperationDefinitionNode)\n\n  if (defs.length === 1) {\n    /* eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison --\n     * graphql@15's `OperationTypeNode` is a type, but graphql@16's `OperationTypeNode` is a native TypeScript enum\n     * Therefore, we cannot use `OperationTypeNode.MUTATION` here because it wouldn't work with graphql@15\n     **/\n    isMutation = defs[0]!.operation === `mutation`\n  }\n\n  return isMutation\n}\n\nexport const analyzeDocument = (\n  document: RequestDocument,\n  excludeOperationName?: boolean,\n): { expression: string; operationName: string | undefined; isMutation: boolean } => {\n  const expression = typeof document === `string` ? document : print(document)\n\n  let isMutation = false\n  let operationName = undefined\n\n  if (excludeOperationName) {\n    return { expression, isMutation, operationName }\n  }\n\n  const docNode = tryCatch(() => (typeof document === `string` ? parse(document) : document))\n  if (docNode instanceof Error) {\n    return { expression, isMutation, operationName }\n  }\n\n  operationName = extractOperationName(docNode)\n  isMutation = extractIsMutation(docNode)\n\n  return { expression, operationName, isMutation }\n}\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,sBAAsB;AAC/C,SAASC,yBAAyB,QAAQ,mBAAmB;AAQ7D,SAASC,KAAK,QAAQ,SAAS;AAC/B,SAASC,KAAK,QAAQ,SAAS;AAE/B;;;AAIA,MAAMC,oBAAoB,GAAIC,QAAsB,IAAwB;EAC1E,IAAIC,aAAa,GAAGC,SAAS;EAE7B,MAAMC,IAAI,GAAGH,QAAQ,CAACI,WAAW,CAACC,MAAM,CAACT,yBAAyB,CAAC;EAEnE,IAAIO,IAAI,CAACG,MAAM,KAAK,CAAC,EAAE;IACrBL,aAAa,GAAGE,IAAI,CAAC,CAAC,CAAE,CAACI,IAAI,EAAEC,KAAK;EACtC;EAEA,OAAOP,aAAa;AACtB,CAAC;AAED,MAAMQ,iBAAiB,GAAIT,QAAsB,IAAa;EAC5D,IAAIU,UAAU,GAAG,KAAK;EAEtB,MAAMP,IAAI,GAAGH,QAAQ,CAACI,WAAW,CAACC,MAAM,CAACT,yBAAyB,CAAC;EAEnE,IAAIO,IAAI,CAACG,MAAM,KAAK,CAAC,EAAE;IACrB;;;;IAIAI,UAAU,GAAGP,IAAI,CAAC,CAAC,CAAE,CAACQ,SAAS,KAAK,UAAU;EAChD;EAEA,OAAOD,UAAU;AACnB,CAAC;AAED,OAAO,MAAME,eAAe,GAAGA,CAC7BZ,QAAyB,EACzBa,oBAA8B,KACoD;EAClF,MAAMC,UAAU,GAAG,OAAOd,QAAQ,KAAK,QAAQ,GAAGA,QAAQ,GAAGF,KAAK,CAACE,QAAQ,CAAC;EAE5E,IAAIU,UAAU,GAAG,KAAK;EACtB,IAAIT,aAAa,GAAGC,SAAS;EAE7B,IAAIW,oBAAoB,EAAE;IACxB,OAAO;MAAEC,UAAU;MAAEJ,UAAU;MAAET;IAAa,CAAE;EAClD;EAEA,MAAMc,OAAO,GAAGpB,QAAQ,CAAC,MAAO,OAAOK,QAAQ,KAAK,QAAQ,GAAGH,KAAK,CAACG,QAAQ,CAAC,GAAGA,QAAS,CAAC;EAC3F,IAAIe,OAAO,YAAYC,KAAK,EAAE;IAC5B,OAAO;MAAEF,UAAU;MAAEJ,UAAU;MAAET;IAAa,CAAE;EAClD;EAEAA,aAAa,GAAGF,oBAAoB,CAACgB,OAAO,CAAC;EAC7CL,UAAU,GAAGD,iBAAiB,CAACM,OAAO,CAAC;EAEvC,OAAO;IAAED,UAAU;IAAEb,aAAa;IAAES;EAAU,CAAE;AAClD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}